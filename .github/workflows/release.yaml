name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]*'

concurrency:
  group: ci-tag-1
  cancel-in-progress: true

jobs:
  push_to_registry:
    name: Build and Publish KDT
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: 'kondukto/kondukto-cli'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Add SHORT_SHA env property
        run: |
          echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV

      - name: Get Last Tag
        run: |
          git fetch --prune --unshallow --tags
          echo GIT_TAG=$(git describe --tags --abbrev=0) >> $GITHUB_ENV 

      - name: Get Version Tag
        run: |
          echo "VERSION_TAG=${{ env.GIT_TAG }}" | cut -d '-' -f 1 >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: ./go.sum

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        if: startsWith(github.ref, 'refs/tags/')
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GO_RELEASER_GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build/Push Tags
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ env.VERSION_TAG }}
            ${{ env.IMAGE_NAME }}:${{ env.VERSION_TAG }}-${{ env.SHORT_SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Deploy to S3
        run: |
          aws s3 cp ./get.sh s3://${{ secrets.AWS_S3_BUCKET_ID }}/index.html

      - name: Invalidate CDN
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"